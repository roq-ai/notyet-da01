generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model accounting {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  debit            Int
  credit           Int
  transaction_date DateTime @db.Date
  description      String   @db.VarChar(255)
  company_id       String   @db.Uuid
  user_id          String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  company          company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  accounting  accounting[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice     invoice[]
}

model invoice {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount       Int
  status       String   @db.VarChar(255)
  vendor       String   @db.VarChar(255)
  invoice_date DateTime @db.Date
  due_date     DateTime @db.Date
  company_id   String   @db.Uuid
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  company      company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model permission {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  permission_name String   @db.VarChar(255)
  role_id         String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  role            role     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model role {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_name  String       @db.VarChar(255)
  user_id    String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  permission permission[]
  user       user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  accounting  accounting[]
  company     company[]
  invoice     invoice[]
  role        role[]
}
